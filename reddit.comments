{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<mysql.connector.connection_cext.CMySQLConnection object at 0x7f487807af60>\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import nltk\n",
    "import jupyter\n",
    "import math\n",
    "import pprint\n",
    "import praw\n",
    "from sqlalchemy import create_engine\n",
    "from sqlalchemy.orm import sessionmaker\n",
    "from textblob import TextBlob\n",
    "import emoji\n",
    "\n",
    "#import datetime as dt\n",
    "import mysql.connector\n",
    "#from IPython import display (this one is problematic)\n",
    "\n",
    "#import seaborn as sns\n",
    "#sns.set(style='darkgrid', context='talk', palette='Dark2')\n",
    "\n",
    "#import sqlalchemy\n",
    "#import mysqldb\n",
    "#import MySQLdb\n",
    "#import pymysql\n",
    "#import string\n",
    "\n",
    "import collections\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "mydb = mysql.connector.connect(\n",
    "  host=\"localhost\",\n",
    "  user=\"root\",\n",
    "  passwd=\"sql\"\n",
    ")\n",
    "\n",
    "print(mydb)\n",
    "\n",
    "#cnx=mysql.connector.connect()\n",
    "\n",
    "cursor=mydb.cursor(buffered=True)\n",
    "#mydb2=mysql.connector.connect(buffered=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('information_schema',)\n",
      "('mysql',)\n",
      "('performance_schema',)\n",
      "('redalert',)\n",
      "('redharvest',)\n",
      "('sys',)\n"
     ]
    }
   ],
   "source": [
    "mycursor=mydb.cursor()\n",
    "\n",
    "#create DB (if this is the first time running code, uncomment the next line)\n",
    "#mycursor.execute(\"CREATE DATABASE redharvest\")\n",
    "\n",
    "#check if DB exists\n",
    "mycursor.execute(\"SHOW DATABASES\")\n",
    "for x in mycursor:\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#connect to db\n",
    "mydb=mysql.connector.connect(\n",
    "    host=\"localhost\",\n",
    "    user=\"root\",\n",
    "    passwd=\"sql\",\n",
    "    database=\"redharvest\",\n",
    "    charset=\"utf8mb4\"\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#alter the db so it can store more complicated text\n",
    "mycursor=mydb.cursor()\n",
    "\n",
    "#mycursor.execute(\"ALTER DATABASE redharvest CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\")\n",
    "#mycursor.execute(\"ALTER TABLE submission CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create db table\n",
    "mycursor=mydb.cursor()\n",
    "\n",
    "#sql=\"DROP TABLE submission\"\n",
    "#mycursor.execute(sql)\n",
    "#mycursor.execute(\"CREATE TABLE IF NOT EXISTS submission (author VARCHAR(300),createtime INT,subid VARCHAR(300),numcomments INT,upvotes INT,downvotes INT, title BLOB,selftext BLOB,upvoteratio FLOAT,url VARCHAR(300),allComments LONGBLOB, PRIMARY KEY(subid))\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('score',)\n",
      "('submission',)\n"
     ]
    }
   ],
   "source": [
    "#check to see table exists\n",
    "mycursor=mydb.cursor()\n",
    "\n",
    "mycursor.execute(\"SHOW TABLES\")\n",
    "\n",
    "for x in mycursor:\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#test inserting row\n",
    "#mycursor=mydb.cursor()\n",
    "\n",
    "#sql=\"INSERT INTO submission (author,createtime,subid,numcomments,upvotes,downvotes,title,selftext,upvoteratio,url,comments) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)\"\n",
    "#val=(\"Ash890\",\"424490033\",\"89898\",\"4\",\"5\",\"0\",\"TestThis\",\"No really test this crap\",\"1.1\",\"www.testit.com\",\"I really hope this works well the first time\")\n",
    "#mycursor.execute(sql,val)\n",
    "\n",
    "#mydb.commit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#mydb=mysql.connector.connect(\n",
    "#    host=\"localhost\",\n",
    "#    user=\"root\",\n",
    "#    passwd=\"sql\",\n",
    "#    database=\"redharvest\"\n",
    "#)\n",
    "\n",
    "#get test inserting row\n",
    "#mycursor=mydb.cursor()\n",
    "\n",
    "#print(\"1 record inserted, ID:\",mycursor.lastrowid)\n",
    "\n",
    "#sql=\"DELETE FROM submission WHERE subid='89898'\"\n",
    "#mycursor.execute(sql)\n",
    "\n",
    "#mydb.commit()\n",
    "\n",
    "#print(mycursor.rowcount,\"record(s) deleted\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reddit=praw.Reddit(client_id='Obe8sGLlN4NcKQ',\n",
    "                  client_secret='VlXJk0avVaEuqmYdWEjPXFb4wEU',\n",
    "                  password='vWGVb9sWZZRo6cVk',\n",
    "                  user_agent='testscript by /u/Smashdawg',\n",
    "                  username='Smashdawg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "subreddit=reddit.subreddit('twitch')\n",
    "\n",
    "#top_python=subreddit.top('day')\n",
    "#top_python=subreddit.top('week')\n",
    "top_python=subreddit.new()\n",
    "#top_python=subreddit.top(limit=None)\n",
    "#top_python=subreddit.hot(limit=None)\n",
    "#top_python=subreddit.new(limit=None)\n",
    "#top_python=subreddit.top('hour')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create dataframe\n",
    "#df_rows=[[submission.author,submission.created_utc,submission.id,submission.num_comments,submission.ups,submission.downs,submission.title,submission.selftext,submission.upvote_ratio,submission.url]for submission in top_python]\n",
    "#df=pd.DataFrame(df_rows,columns=['author','createtime','subid','numcomments','upvotes','downvotes','title','selftext','upvoteratio','url'])\n",
    "\n",
    "#df.head()\n",
    "\n",
    "df_rows=[[submission.author,submission.created_utc,submission.id,submission.num_comments,submission.ups,submission.downs,submission.title,submission.selftext,submission.upvote_ratio,submission.url]for submission in top_python]\n",
    "df=pd.DataFrame(df_rows,columns=['author','createtime','subid','numcomments','upvotes','downvotes','title','selftext','upvoteratio','url'])\n",
    "\n",
    "print(len(df),'submissions')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##code that creates a list of strings\n",
    "#debug statement\n",
    "print(len(df),'submissions to process')\n",
    "\n",
    "#subComments will be a string of all the comments for a particular SUBmission\n",
    "#create a list to hold a list of subComments for each ID\n",
    "allComments = []\n",
    "\n",
    "#for each row in the df\n",
    "for i, row in df.iterrows():\n",
    "    \n",
    "    #print a period so we know the process is running\n",
    "    print('.', end='')\n",
    "    \n",
    "    #grab ID of that df row\n",
    "    subID = df.iloc[i]['subid']\n",
    "    #print('setting submission id to',subID)\n",
    "    \n",
    "    #set the submissionID for praw\n",
    "    submission = reddit.submission(subID)\n",
    "    submission.comments.replace_more(limit=None)\n",
    "    \n",
    "    #init and clear a new subComments string for appending\n",
    "    subComments = \"\"\n",
    "    \n",
    "    #for each comment in submission, append into subComments\n",
    "    #each comment is separated with a single line break PLUS exactly twenty(20) hyphens\n",
    "    for comment in submission.comments.list():\n",
    "        subComments = subComments + comment.body + \"\\n\\n\" + \"------------------------------\" + \"\\n\\n\"\n",
    "        \n",
    "    #output number of comments that was pulled\n",
    "    #print('pulled',len(subComments),'comments for id:',subID)\n",
    "    \n",
    "    #finally, store the submission comments string into allComments\n",
    "    allComments.append(subComments)\n",
    "\n",
    "print('')\n",
    "print('COMPLETE:',len(allComments),'submissions were processed')\n",
    "\n",
    "df['allComments'] = allComments\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fix classes of df variables\n",
    "df=df.astype({\"author\": str,\"subid\": str,\"title\": str,\"selftext\": str,\"url\": str,\"allComments\": str})\n",
    "\n",
    "#make text fields in df lowercase\n",
    "df['allComments']=df['allComments'].str.lower()\n",
    "df['title']=df['title'].str.lower()\n",
    "df['selftext']=df['selftext'].str.lower()\n",
    "\n",
    "df.head()\n",
    "\n",
    "#test=\"ðŸ˜ƒ at this\"\n",
    "#testchar=[str for str in test]\n",
    "#emojitest=[c for c in testchar if c in emoji.UNICODE_EMOJI]\n",
    "#test=emoji.demojize(test)\n",
    "#print(test)\n",
    "\n",
    "#remove emojis from text\n",
    "#for i, row in df.iterrows():\n",
    "#    df['allComments']=emoji.demojize('allComments')\n",
    "#    df['title']=emoji.demojize('title')\n",
    "#    df['selftext']=emoji.demojize('selftext')\n",
    "\n",
    "#df=df[~df.subid.isin(ta.subid)]\n",
    "#df.iterrows('allComments')\n",
    "\n",
    "#df.head()\n",
    "\n",
    "#check df data types \n",
    "df.dtypes\n",
    "\n",
    "#print(type('author'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##code that creates a list of strings\n",
    "#debug statement\n",
    "#print(len(df),'submissions to process')\n",
    "\n",
    "#subComments will be a string of all the comments for a particular SUBmission\n",
    "#create a list to hold a list of subComments for each ID\n",
    "#allCommentsemoj = []\n",
    "\n",
    "#for each row in the df\n",
    "#for i, row in df.iterrows():\n",
    "    \n",
    "    #print a period so we know the process is running\n",
    " #   print('.', end='')\n",
    "    \n",
    "    #grab ID of that df row\n",
    "  #  subID = df.iloc[i]['subid']\n",
    "    #print('setting submission id to',subID)\n",
    "    \n",
    "    #set the submissionID for praw\n",
    "    #submission = reddit.submission(subID)\n",
    "    #submission.comments.replace_more(limit=None)\n",
    "    \n",
    "    #init and clear a new subComments string for appending\n",
    "    #subComments = \"\"\n",
    "    \n",
    "    #for each comment in submission, append into subComments\n",
    "    #each comment is separated with a single line break PLUS exactly twenty(20) hyphens\n",
    "   # for comment in df.allComments:\n",
    "        #print('d')\n",
    "    #    comment = emoji.demojize(comment)\n",
    "        \n",
    "    #output number of comments that was pulled\n",
    "    #print('pulled',len(subComments),'comments for id:',subID)\n",
    "    \n",
    "    #finally, store the submission comments string into allComments\n",
    "    #allComments.append(subComments)\n",
    "\n",
    "#print('')\n",
    "#print('COMPLETE:',len(allComments),'submissions were processed')\n",
    "\n",
    "#df['allComments'] = allComments\n",
    "#df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#attempt to fix db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine=create_engine(\"mysql+pymysql://root:sql@localhost/redharvest\",pool_size=100, max_overflow=0,pool_recycle=-1)\n",
    "con=engine.connect()\n",
    "\n",
    "#create a configured \"Session\" class\n",
    "Session=sessionmaker(bind=engine)\n",
    "\n",
    "#create a Session\n",
    "session=Session()\n",
    "\n",
    "#engine=create_engine(conn_str,echo=True)\n",
    "\n",
    "ta=pd.read_sql('submission',engine)\n",
    "\n",
    "#for i in list(df.subid):\n",
    "#    if i in list(ta.subid):\n",
    "#        pass\n",
    "#    else:\n",
    "#        ta[i]='NULL'\n",
    "#tconso=ta.append(df)\n",
    "#df.to_sql('submission',engine,if_exists='append',sort=True\n",
    "\n",
    "#subeg=reddit.submission(id='bsylmv')\n",
    "#print(submission.title)\n",
    "#pprint.pprint(vars(subeg))\n",
    "\n",
    "#for i, row in df.iterrows():\n",
    "#    if df.subid in ta:\n",
    "#        print('TRUE')\n",
    "#        #df.drop([i])\n",
    "#    else:\n",
    "#        print('FALSE')\n",
    "#print('COMPLETE')\n",
    "#for i, row in df.iterrows():\n",
    "#    print('a')\n",
    "#    for j, row in ta.iterrows():\n",
    "#        print('b')\n",
    "\n",
    "#for i, row in df.iterrows():\n",
    "#    print(row['subid'])\n",
    "#print('=================') \n",
    "#for i, row in ta.iterrows():\n",
    "#    print(row['subid'])\n",
    "#print('=================')\n",
    "#for i, row in df.iterrows():\n",
    "#    print(df.subid.isin(ta.subid).bool)\n",
    "#    if(df.subid.isin(ta.subid).bool):\n",
    "#        print('true')\n",
    "#        #print(row['subid'])\n",
    "#        #df.drop(i,inplace=True)\n",
    "#print('=================') \n",
    "#df.head()\n",
    "\n",
    "df=df[~df.subid.isin(ta.subid)]\n",
    "\n",
    "#for i, row in df.iterrows():\n",
    "#    dfid=df.subid\n",
    "#    print(dfid)\n",
    "#    for j, row in ta.iterrows():\n",
    "#        taid=ta.subid\n",
    "#        print(taid)\n",
    "#        if dfid==taid:\n",
    "#            print('TRUE')\n",
    "#        else:\n",
    "#            print('FALSE')\n",
    "#print('COMPLETE')\n",
    "\n",
    "\n",
    "mycursor=mydb.cursor()\n",
    "\n",
    "#insert data into table 'submission'\n",
    "df.to_sql('submission',engine,if_exists='append',index=False)\n",
    "\n",
    "#mydb.commit()\n",
    "#commit()\n",
    "\n",
    "session.close()\n",
    "print('COMPLETE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df.to_sql('submission',engine)\n",
    "#engine.execute(\"SELECT * FROM submission\").fetchall()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#count the number of rows in the 'submission' table\n",
    "table_count=engine.execute(\"SELECT COUNT(*) FROM submission\").fetchall()\n",
    "table_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sqlquerydf2=engine.execute(\"SELECT subid,title,selftext,allComments FROM submission\").fetchall()\n",
    "sqlquerydf2\n",
    "\n",
    "df2=pd.DataFrame(sqlquerydf2,columns=['subid','title','selftext','allComments'])\n",
    "#df_rows2=[[subid,title,selftext,allComments]for submission in sqlquerydf2]\n",
    "#df2=pd.DataFrame(df_rows2,columns=['subid','title','selftext','allComments'])\n",
    "\n",
    "print(len(df2),'submissions')\n",
    "df2.head()\n",
    "\n",
    "#df2.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fix classes of df2 variables\n",
    "df2=df2.astype({\"subid\": str,\"title\": str,\"selftext\": str,\"allComments\": str})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate polarity and subjectivity for titles in submissions\n",
    "#dftw[['polarityTitle','subjectivityTitle']]=dftw['Title'].apply(lambda Text: pd.Series(TextBlob(Text).sentiment))\n",
    "df2[['polarityTitle','subjectivityTitle']]=df2['title'].apply(lambda Text: pd.Series(TextBlob(Text).sentiment))\n",
    "\n",
    "#calculate polarity and subjectivity for submission body\n",
    "#dftw[['polaritySub','subjectivitySub']]=dftw['SubText'].apply(lambda Text: pd.Series(TextBlob(Text).sentiment))\n",
    "df2[['polaritySelftext','subjectivitySelftext']]=df2['selftext'].apply(lambda Text: pd.Series(TextBlob(Text).sentiment))\n",
    "\n",
    "#calculate polarity and subjectivity for comments in submissions\n",
    "#dftw[['polarityComm','subjectivityComm']]=dftw['allComments'].apply(lambda Text: pd.Series(TextBlob(Text).sentiment))\n",
    "df2[['polarityComm','subjectivityComm']]=df2['allComments'].apply(lambda Text: pd.Series(TextBlob(Text).sentiment))\n",
    "\n",
    "#calculate the average polarity and subjectivity for titles and comments in submissions\n",
    "#dftw['avePolarity']=dftw['polarityTitle']+dftw['polaritySub']+dftw['polarityComm']/3\n",
    "#dftw['aveSubjectivity']=dftw['subjectivityTitle']+dftw['subjectivitySub']+dftw['subjectivityComm']/3\n",
    "\n",
    "#do weighted score instead? like 0.1 for titles, .04 for sub and 0.5 for comments?\n",
    "\n",
    "#print(dftw)\n",
    "#print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "#create list of keywords\n",
    "keywords =  [ 'load', 'work', 'buffer', 'ingest', 'broken', 'connect', 'lag', 'offline', 'watch', 'buffer', 'blank', \n",
    "    'black', 'freezing', 'segments', 'website', 'quality', 'rip', 'sync', 'live', '500', 'stutter', 'down', 'play', \n",
    "    'rtmp' ]\n",
    "keywords_re = re.compile(\"|\".join(keywords))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#count number of instances \n",
    "df2['KeywordScoreTitle']=df2['title'].str.count(keywords_re)\n",
    "df2['KeywordScoreSubBod']=df2['selftext'].str.count(keywords_re)\n",
    "df2['KeywordScoreComm']=df2['allComments'].str.count(keywords_re)\n",
    "df2['KeywordScore']=df2['KeywordScoreTitle']+df2['KeywordScoreSubBod']+df2['KeywordScoreComm']\n",
    "#print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check head of df2\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#after scoring complete, drop text columns to store df into db table\n",
    "df2=df2.drop(['title','selftext','allComments'],axis=1)\n",
    "\n",
    "#make sure columns are dropped\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create db table\n",
    "mycursor=mydb.cursor()\n",
    "\n",
    "#sql2=\"DROP TABLE score\"\n",
    "#mycursor.execute(sql2)\n",
    "#mycursor.execute(\"CREATE TABLE IF NOT EXISTS score (subid VARCHAR(50),polarityTitle FLOAT,subjectivityTitle FLOAT,polaritySelftext FLOAT,subjectivitySelftext FLOAT,polarityComm FLOAT,subjectivityComm FLOAT,KeywordScoreTitle FLOAT,KeywordScoreSubBod FLOAT,KeywordScoreComm FLOAT,KeywordScore FLOAT,PRIMARY KEY(subid), FOREIGN KEY(subid) REFERENCES submission(subid))\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check to see table exists\n",
    "mycursor=mydb.cursor()\n",
    "\n",
    "mycursor.execute(\"SHOW TABLES\")\n",
    "\n",
    "for x in mycursor:\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine=create_engine(\"mysql+pymysql://root:sql@localhost/redharvest\",pool_size=100, max_overflow=0,pool_recycle=-1)\n",
    "con=engine.connect()\n",
    "\n",
    "#create a configured \"Session\" class\n",
    "Session=sessionmaker(bind=engine)\n",
    "\n",
    "#create a Session\n",
    "session=Session()\n",
    "\n",
    "#engine=create_engine(conn_str,echo=True)\n",
    "\n",
    "ta2=pd.read_sql('score',engine)\n",
    "\n",
    "#for i in list(df.subid):\n",
    "#    if i in list(ta.subid):\n",
    "#        pass\n",
    "#    else:\n",
    "#        ta[i]='NULL'\n",
    "#tconso=ta.append(df)\n",
    "#df.to_sql('submission',engine,if_exists='append',sort=True\n",
    "\n",
    "#subeg=reddit.submission(id='bsylmv')\n",
    "#print(submission.title)\n",
    "#pprint.pprint(vars(subeg))\n",
    "\n",
    "#for i, row in df2.iterrows():\n",
    "#    if 'subid' in ta2.iterrows():\n",
    "#        #df2.drop([i])\n",
    "#        print('TRUE')\n",
    "#    else:\n",
    "#        print('FALSE')\n",
    "df2=df2[~df2.subid.isin(ta2.subid)]\n",
    "print('COMPLETE')\n",
    "\n",
    "mycursor=mydb.cursor()\n",
    "\n",
    "#insert data into table 'submission'\n",
    "df2.to_sql('score',engine,if_exists='append',index=False)\n",
    "\n",
    "mydb.commit()\n",
    "#commit()\n",
    "\n",
    "session.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df.to_sql('scores',engine)\n",
    "#engine.execute(\"SELECT * FROM score\").fetchall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#count the number of rows in the 'submission' table\n",
    "table_count=engine.execute(\"SELECT COUNT(*) FROM score\").fetchall()\n",
    "table_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
